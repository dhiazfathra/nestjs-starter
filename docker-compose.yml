services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nestjs-starter-app
    restart: always
    ports:
      - '${PORT:-3000}:3000'
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-nestjs}?schema=public
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'wget -qO- http://localhost:3000/api || exit 1']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nestjs-network

  postgres:
    image: postgres:17-alpine
    container_name: nestjs-starter-postgres
    restart: always
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-nestjs}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-nestjs}',
        ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - nestjs-network

  redis:
    image: redis:7-alpine
    container_name: nestjs-starter-redis
    restart: always
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - nestjs-network

networks:
  nestjs-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
