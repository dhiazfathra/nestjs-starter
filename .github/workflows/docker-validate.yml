name: Docker Validation

on:
  push:
    branches: [ main, master ]
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - '.dockerignore'
      - '.github/workflows/docker-validate.yml'
      - 'prisma/schema.prisma'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - '.dockerignore'
      - '.github/workflows/docker-validate.yml'
      - 'prisma/schema.prisma'

# Limit concurrent runs of the same workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  validate-dockerfile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # Cache Hadolint
      - name: Cache Hadolint
        uses: actions/cache@v4
        with:
          path: ~/.cache/hadolint
          key: ${{ runner.os }}-hadolint-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-hadolint-

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: error

      # Cache Docker layers
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Cache Docker image layers
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: nestjs-starter:test
          cache-from: |
            type=local,src=/tmp/.buildx-cache
            type=gha
          cache-to: |
            type=local,dest=/tmp/.buildx-cache-new,mode=max
            type=gha,mode=max
          outputs: type=docker

      # Move cache to avoid growing cache size
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  validate-docker-compose:
    runs-on: ubuntu-latest
    needs: validate-dockerfile
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # Cache Docker Compose images
      - name: Cache Docker Compose images
        uses: actions/cache@v4
        with:
          path: ~/.docker
          key: ${{ runner.os }}-docker-compose-${{ hashFiles('docker-compose.yml') }}
          restore-keys: |
            ${{ runner.os }}-docker-compose-

      - name: Pull Docker images
        run: |
          docker pull postgres:17-alpine
          docker pull redis:7-alpine
          docker pull node:22-alpine

      - name: Validate docker-compose.yml
        run: |
          docker-compose config -q
          if [ $? -ne 0 ]; then
            echo "docker-compose.yml is not valid"
            exit 1
          fi

      - name: Create .env file for testing
        run: |
          cp .env.example .env
          # Make sure Redis host is set to 'redis' for Docker
          sed -i 's/REDIS_HOST=localhost/REDIS_HOST=redis/g' .env

      # Set resource limits for Docker containers
      - name: Set Docker resource limits
        run: |
          echo '{"experimental":true,"cpus":2,"memory":"2G"}' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      - name: Start services with docker-compose
        run: |
          docker-compose up -d
          # Give services time to start
          sleep 10

      - name: Check if services are running
        run: |
          if [ "$(docker-compose ps -q | wc -l)" -ne "3" ]; then
            echo "Not all services are running"
            docker-compose logs
            exit 1
          fi
          
          # Check app service
          if ! docker-compose ps app | grep -q "Up"; then
            echo "App service is not running"
            docker-compose logs app
            exit 1
          fi
          
          # Check postgres service
          if ! docker-compose ps postgres | grep -q "Up"; then
            echo "Postgres service is not running"
            docker-compose logs postgres
            exit 1
          fi
          
          # Check redis service
          if ! docker-compose ps redis | grep -q "Up"; then
            echo "Redis service is not running"
            docker-compose logs redis
            exit 1
          fi

      # Check if app is listening on port
      - name: Check if app is responding
        run: |
          # Wait for app to start accepting connections
          timeout 60s bash -c 'until nc -z localhost 3001; do sleep 2; done' || {
            echo "App is not responding on port 3001"
            docker-compose logs app
            exit 1
          }

      - name: Clean up
        run: docker-compose down -v
        if: always()
