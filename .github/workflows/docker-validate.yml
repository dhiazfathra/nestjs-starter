name: Docker Validation

on:
  push:
    branches: [ main, master ]
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - '.dockerignore'
      - '.github/workflows/docker-validate.yml'
      - 'prisma/schema.prisma'
      - 'monitoring/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - '.dockerignore'
      - '.github/workflows/docker-validate.yml'
      - 'prisma/schema.prisma'
      - 'monitoring/**'

# Limit concurrent runs of the same workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  validate-dockerfile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # Cache Hadolint
      - name: Cache Hadolint
        uses: actions/cache@v4
        with:
          path: ~/.cache/hadolint
          key: ${{ runner.os }}-hadolint-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-hadolint-

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: error

      # Cache Docker layers
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Cache Docker image layers
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          tags: nestjs-starter:test
          cache-from: |
            type=local,src=/tmp/.buildx-cache
            type=gha
          cache-to: |
            type=local,dest=/tmp/.buildx-cache-new,mode=max
            type=gha,mode=max
          outputs: type=docker

      # Move cache to avoid growing cache size
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  validate-docker-compose:
    runs-on: ubuntu-latest
    needs: validate-dockerfile
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # Cache Docker Compose images
      - name: Cache Docker Compose images
        uses: actions/cache@v4
        with:
          path: ~/.docker
          key: ${{ runner.os }}-docker-compose-${{ hashFiles('docker-compose.yml') }}
          restore-keys: |
            ${{ runner.os }}-docker-compose-

      - name: Pull Docker images
        run: |
          docker pull postgres:17-alpine
          docker pull redis:7-alpine
          docker pull node:22-alpine

      - name: Create .env file for testing
        run: |
          # Create a minimal .env file for testing
          echo "DATABASE_URL=postgresql://postgres:postgres@postgres:5432/nestjs?schema=public" > .env
          echo "JWT_SECRET=test-secret-key" >> .env
          echo "JWT_EXPIRATION=1d" >> .env
          echo "PORT=3000" >> .env
          echo "REDIS_HOST=redis" >> .env
          echo "REDIS_PORT=6379" >> .env
          echo "CACHE_TTL=300" >> .env
          echo "POSTGRES_USER=postgres" >> .env
          echo "POSTGRES_PASSWORD=postgres" >> .env
          echo "POSTGRES_DB=nestjs" >> .env
          echo "POSTGRES_PORT=5432" >> .env

          # Display the .env file for debugging
          echo "Contents of .env file:"
          cat .env

      - name: Validate docker-compose.yml
        run: |
          docker compose config -q
          if [ $? -ne 0 ]; then
            echo "docker-compose.yml is not valid"
            exit 1
          fi
         
          echo "Docker Compose configuration is valid"

      # Start services with docker compose using healthchecks
      - name: Start services with docker compose
        run: |
          # Apply platform setting and start services
          docker compose up -d

      # Validate that all services are healthy
      - name: Validate services are healthy
        run: |
          # Wait for all services to be healthy
          echo "Waiting for services to become healthy..."
         
          # Wait for postgres and redis to be healthy first
          timeout 120s bash -c "until [ \"\$(docker compose ps postgres redis --format \"{{.Status}}\" | grep -c \"healthy\")\" -eq \"2\" ]; do
            echo \"Waiting for postgres and redis to become healthy...\"
            docker compose ps
            sleep 5
          done"
         
          echo "Postgres and Redis are healthy. Waiting for app to become healthy..."
         
          # Now wait for the app to be healthy
          timeout 180s bash -c "until [ \"\$(docker compose ps app --format \"{{.Status}}\" | grep -c \"healthy\")\" -eq \"1\" ]; do
            echo \"Waiting for app to become healthy...\"
            docker compose ps
            # Show logs from the app container if it's restarting or unhealthy
            if [[ \"\$(docker compose ps app --format \"{{.Status}}\")\" == *\"Restarting\"* || \"\$(docker compose ps app --format \"{{.Status}}\")\" == *\"unhealthy\"* ]]; then
              echo \"App container is not healthy, showing logs:\"
              docker compose logs app --tail 50
            fi
            sleep 10
          done"

          # Verify that all services are running and healthy
          docker compose ps
          if [ "$(docker compose ps --format '{{.Name}}:{{.Status}}' | grep -c '(healthy)')" -lt "6" ]; then
            echo "Not enough services are healthy"
            docker compose logs
            exit 1
          fi

          echo "All services are healthy!"
         
          # Wait a moment for the app to be fully ready
          sleep 10
         
          # Test the health endpoint
          echo "Testing health endpoint..."
          curl -v --retry 3 --retry-delay 2 --retry-connrefused http://localhost:3000/api

      # Check app health using the health endpoint
      - name: Check app health
        run: |
          # Then check the health endpoint
          timeout 30s bash -c 'until curl -s http://localhost:3000/api | grep -q "Hello World"; do sleep 2; done' || {
            echo "Health check failed"
            docker compose logs app
            exit 1
          }

          echo "Health check passed successfully"
          curl -s http://localhost:3000/api

      - name: Clean up
        run: docker compose down -v
        if: always()
